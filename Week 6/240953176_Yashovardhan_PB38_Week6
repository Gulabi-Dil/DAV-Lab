{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "b9c95c6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cyl</th>\n",
       "      <th>disp</th>\n",
       "      <th>hp</th>\n",
       "      <th>drat</th>\n",
       "      <th>wt</th>\n",
       "      <th>qsec</th>\n",
       "      <th>vs</th>\n",
       "      <th>am</th>\n",
       "      <th>gear</th>\n",
       "      <th>carb</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mazda RX4</th>\n",
       "      <td>21.0</td>\n",
       "      <td>6</td>\n",
       "      <td>160.0</td>\n",
       "      <td>110</td>\n",
       "      <td>3.90</td>\n",
       "      <td>2.620</td>\n",
       "      <td>16.46</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mazda RX4 Wag</th>\n",
       "      <td>21.0</td>\n",
       "      <td>6</td>\n",
       "      <td>160.0</td>\n",
       "      <td>110</td>\n",
       "      <td>3.90</td>\n",
       "      <td>2.875</td>\n",
       "      <td>17.02</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Datsun 710</th>\n",
       "      <td>22.8</td>\n",
       "      <td>4</td>\n",
       "      <td>108.0</td>\n",
       "      <td>93</td>\n",
       "      <td>3.85</td>\n",
       "      <td>2.320</td>\n",
       "      <td>18.61</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hornet 4 Drive</th>\n",
       "      <td>21.4</td>\n",
       "      <td>6</td>\n",
       "      <td>258.0</td>\n",
       "      <td>110</td>\n",
       "      <td>3.08</td>\n",
       "      <td>3.215</td>\n",
       "      <td>19.44</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hornet Sportabout</th>\n",
       "      <td>18.7</td>\n",
       "      <td>8</td>\n",
       "      <td>360.0</td>\n",
       "      <td>175</td>\n",
       "      <td>3.15</td>\n",
       "      <td>3.440</td>\n",
       "      <td>17.02</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Valiant</th>\n",
       "      <td>18.1</td>\n",
       "      <td>6</td>\n",
       "      <td>225.0</td>\n",
       "      <td>105</td>\n",
       "      <td>2.76</td>\n",
       "      <td>3.460</td>\n",
       "      <td>20.22</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Duster 360</th>\n",
       "      <td>14.3</td>\n",
       "      <td>8</td>\n",
       "      <td>360.0</td>\n",
       "      <td>245</td>\n",
       "      <td>3.21</td>\n",
       "      <td>3.570</td>\n",
       "      <td>15.84</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Merc 240D</th>\n",
       "      <td>24.4</td>\n",
       "      <td>4</td>\n",
       "      <td>146.7</td>\n",
       "      <td>62</td>\n",
       "      <td>3.69</td>\n",
       "      <td>3.190</td>\n",
       "      <td>20.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Merc 230</th>\n",
       "      <td>22.8</td>\n",
       "      <td>4</td>\n",
       "      <td>140.8</td>\n",
       "      <td>95</td>\n",
       "      <td>3.92</td>\n",
       "      <td>3.150</td>\n",
       "      <td>22.90</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Merc 280</th>\n",
       "      <td>19.2</td>\n",
       "      <td>6</td>\n",
       "      <td>167.6</td>\n",
       "      <td>123</td>\n",
       "      <td>3.92</td>\n",
       "      <td>3.440</td>\n",
       "      <td>18.30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Merc 280C</th>\n",
       "      <td>17.8</td>\n",
       "      <td>6</td>\n",
       "      <td>167.6</td>\n",
       "      <td>123</td>\n",
       "      <td>3.92</td>\n",
       "      <td>3.440</td>\n",
       "      <td>18.90</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Merc 450SE</th>\n",
       "      <td>16.4</td>\n",
       "      <td>8</td>\n",
       "      <td>275.8</td>\n",
       "      <td>180</td>\n",
       "      <td>3.07</td>\n",
       "      <td>4.070</td>\n",
       "      <td>17.40</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Merc 450SL</th>\n",
       "      <td>17.3</td>\n",
       "      <td>8</td>\n",
       "      <td>275.8</td>\n",
       "      <td>180</td>\n",
       "      <td>3.07</td>\n",
       "      <td>3.730</td>\n",
       "      <td>17.60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Merc 450SLC</th>\n",
       "      <td>15.2</td>\n",
       "      <td>8</td>\n",
       "      <td>275.8</td>\n",
       "      <td>180</td>\n",
       "      <td>3.07</td>\n",
       "      <td>3.780</td>\n",
       "      <td>18.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cadillac Fleetwood</th>\n",
       "      <td>10.4</td>\n",
       "      <td>8</td>\n",
       "      <td>472.0</td>\n",
       "      <td>205</td>\n",
       "      <td>2.93</td>\n",
       "      <td>5.250</td>\n",
       "      <td>17.98</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lincoln Continental</th>\n",
       "      <td>10.4</td>\n",
       "      <td>8</td>\n",
       "      <td>460.0</td>\n",
       "      <td>215</td>\n",
       "      <td>3.00</td>\n",
       "      <td>5.424</td>\n",
       "      <td>17.82</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chrysler Imperial</th>\n",
       "      <td>14.7</td>\n",
       "      <td>8</td>\n",
       "      <td>440.0</td>\n",
       "      <td>230</td>\n",
       "      <td>3.23</td>\n",
       "      <td>5.345</td>\n",
       "      <td>17.42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiat 128</th>\n",
       "      <td>32.4</td>\n",
       "      <td>4</td>\n",
       "      <td>78.7</td>\n",
       "      <td>66</td>\n",
       "      <td>4.08</td>\n",
       "      <td>2.200</td>\n",
       "      <td>19.47</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Honda Civic</th>\n",
       "      <td>30.4</td>\n",
       "      <td>4</td>\n",
       "      <td>75.7</td>\n",
       "      <td>52</td>\n",
       "      <td>4.93</td>\n",
       "      <td>1.615</td>\n",
       "      <td>18.52</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Toyota Corolla</th>\n",
       "      <td>33.9</td>\n",
       "      <td>4</td>\n",
       "      <td>71.1</td>\n",
       "      <td>65</td>\n",
       "      <td>4.22</td>\n",
       "      <td>1.835</td>\n",
       "      <td>19.90</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Toyota Corona</th>\n",
       "      <td>21.5</td>\n",
       "      <td>4</td>\n",
       "      <td>120.1</td>\n",
       "      <td>97</td>\n",
       "      <td>3.70</td>\n",
       "      <td>2.465</td>\n",
       "      <td>20.01</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dodge Challenger</th>\n",
       "      <td>15.5</td>\n",
       "      <td>8</td>\n",
       "      <td>318.0</td>\n",
       "      <td>150</td>\n",
       "      <td>2.76</td>\n",
       "      <td>3.520</td>\n",
       "      <td>16.87</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AMC Javelin</th>\n",
       "      <td>15.2</td>\n",
       "      <td>8</td>\n",
       "      <td>304.0</td>\n",
       "      <td>150</td>\n",
       "      <td>3.15</td>\n",
       "      <td>3.435</td>\n",
       "      <td>17.30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Camaro Z28</th>\n",
       "      <td>13.3</td>\n",
       "      <td>8</td>\n",
       "      <td>350.0</td>\n",
       "      <td>245</td>\n",
       "      <td>3.73</td>\n",
       "      <td>3.840</td>\n",
       "      <td>15.41</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pontiac Firebird</th>\n",
       "      <td>19.2</td>\n",
       "      <td>8</td>\n",
       "      <td>400.0</td>\n",
       "      <td>175</td>\n",
       "      <td>3.08</td>\n",
       "      <td>3.845</td>\n",
       "      <td>17.05</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiat X1-9</th>\n",
       "      <td>27.3</td>\n",
       "      <td>4</td>\n",
       "      <td>79.0</td>\n",
       "      <td>66</td>\n",
       "      <td>4.08</td>\n",
       "      <td>1.935</td>\n",
       "      <td>18.90</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Porsche 914-2</th>\n",
       "      <td>26.0</td>\n",
       "      <td>4</td>\n",
       "      <td>120.3</td>\n",
       "      <td>91</td>\n",
       "      <td>4.43</td>\n",
       "      <td>2.140</td>\n",
       "      <td>16.70</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lotus Europa</th>\n",
       "      <td>30.4</td>\n",
       "      <td>4</td>\n",
       "      <td>95.1</td>\n",
       "      <td>113</td>\n",
       "      <td>3.77</td>\n",
       "      <td>1.513</td>\n",
       "      <td>16.90</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ford Pantera L</th>\n",
       "      <td>15.8</td>\n",
       "      <td>8</td>\n",
       "      <td>351.0</td>\n",
       "      <td>264</td>\n",
       "      <td>4.22</td>\n",
       "      <td>3.170</td>\n",
       "      <td>14.50</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ferrari Dino</th>\n",
       "      <td>19.7</td>\n",
       "      <td>6</td>\n",
       "      <td>145.0</td>\n",
       "      <td>175</td>\n",
       "      <td>3.62</td>\n",
       "      <td>2.770</td>\n",
       "      <td>15.50</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Maserati Bora</th>\n",
       "      <td>15.0</td>\n",
       "      <td>8</td>\n",
       "      <td>301.0</td>\n",
       "      <td>335</td>\n",
       "      <td>3.54</td>\n",
       "      <td>3.570</td>\n",
       "      <td>14.60</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Volvo 142E</th>\n",
       "      <td>21.4</td>\n",
       "      <td>4</td>\n",
       "      <td>121.0</td>\n",
       "      <td>109</td>\n",
       "      <td>4.11</td>\n",
       "      <td>2.780</td>\n",
       "      <td>18.60</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  \\\n",
       "model                                                                          \n",
       "Mazda RX4            21.0    6  160.0  110  3.90  2.620  16.46   0   1     4   \n",
       "Mazda RX4 Wag        21.0    6  160.0  110  3.90  2.875  17.02   0   1     4   \n",
       "Datsun 710           22.8    4  108.0   93  3.85  2.320  18.61   1   1     4   \n",
       "Hornet 4 Drive       21.4    6  258.0  110  3.08  3.215  19.44   1   0     3   \n",
       "Hornet Sportabout    18.7    8  360.0  175  3.15  3.440  17.02   0   0     3   \n",
       "Valiant              18.1    6  225.0  105  2.76  3.460  20.22   1   0     3   \n",
       "Duster 360           14.3    8  360.0  245  3.21  3.570  15.84   0   0     3   \n",
       "Merc 240D            24.4    4  146.7   62  3.69  3.190  20.00   1   0     4   \n",
       "Merc 230             22.8    4  140.8   95  3.92  3.150  22.90   1   0     4   \n",
       "Merc 280             19.2    6  167.6  123  3.92  3.440  18.30   1   0     4   \n",
       "Merc 280C            17.8    6  167.6  123  3.92  3.440  18.90   1   0     4   \n",
       "Merc 450SE           16.4    8  275.8  180  3.07  4.070  17.40   0   0     3   \n",
       "Merc 450SL           17.3    8  275.8  180  3.07  3.730  17.60   0   0     3   \n",
       "Merc 450SLC          15.2    8  275.8  180  3.07  3.780  18.00   0   0     3   \n",
       "Cadillac Fleetwood   10.4    8  472.0  205  2.93  5.250  17.98   0   0     3   \n",
       "Lincoln Continental  10.4    8  460.0  215  3.00  5.424  17.82   0   0     3   \n",
       "Chrysler Imperial    14.7    8  440.0  230  3.23  5.345  17.42   0   0     3   \n",
       "Fiat 128             32.4    4   78.7   66  4.08  2.200  19.47   1   1     4   \n",
       "Honda Civic          30.4    4   75.7   52  4.93  1.615  18.52   1   1     4   \n",
       "Toyota Corolla       33.9    4   71.1   65  4.22  1.835  19.90   1   1     4   \n",
       "Toyota Corona        21.5    4  120.1   97  3.70  2.465  20.01   1   0     3   \n",
       "Dodge Challenger     15.5    8  318.0  150  2.76  3.520  16.87   0   0     3   \n",
       "AMC Javelin          15.2    8  304.0  150  3.15  3.435  17.30   0   0     3   \n",
       "Camaro Z28           13.3    8  350.0  245  3.73  3.840  15.41   0   0     3   \n",
       "Pontiac Firebird     19.2    8  400.0  175  3.08  3.845  17.05   0   0     3   \n",
       "Fiat X1-9            27.3    4   79.0   66  4.08  1.935  18.90   1   1     4   \n",
       "Porsche 914-2        26.0    4  120.3   91  4.43  2.140  16.70   0   1     5   \n",
       "Lotus Europa         30.4    4   95.1  113  3.77  1.513  16.90   1   1     5   \n",
       "Ford Pantera L       15.8    8  351.0  264  4.22  3.170  14.50   0   1     5   \n",
       "Ferrari Dino         19.7    6  145.0  175  3.62  2.770  15.50   0   1     5   \n",
       "Maserati Bora        15.0    8  301.0  335  3.54  3.570  14.60   0   1     5   \n",
       "Volvo 142E           21.4    4  121.0  109  4.11  2.780  18.60   1   1     4   \n",
       "\n",
       "                     carb  \n",
       "model                      \n",
       "Mazda RX4               4  \n",
       "Mazda RX4 Wag           4  \n",
       "Datsun 710              1  \n",
       "Hornet 4 Drive          1  \n",
       "Hornet Sportabout       2  \n",
       "Valiant                 1  \n",
       "Duster 360              4  \n",
       "Merc 240D               2  \n",
       "Merc 230                2  \n",
       "Merc 280                4  \n",
       "Merc 280C               4  \n",
       "Merc 450SE              3  \n",
       "Merc 450SL              3  \n",
       "Merc 450SLC             3  \n",
       "Cadillac Fleetwood      4  \n",
       "Lincoln Continental     4  \n",
       "Chrysler Imperial       4  \n",
       "Fiat 128                1  \n",
       "Honda Civic             2  \n",
       "Toyota Corolla          1  \n",
       "Toyota Corona           1  \n",
       "Dodge Challenger        2  \n",
       "AMC Javelin             2  \n",
       "Camaro Z28              4  \n",
       "Pontiac Firebird        2  \n",
       "Fiat X1-9               1  \n",
       "Porsche 914-2           2  \n",
       "Lotus Europa            2  \n",
       "Ford Pantera L          4  \n",
       "Ferrari Dino            6  \n",
       "Maserati Bora           8  \n",
       "Volvo 142E              2  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "Question 1:\n",
    "For the MTCARS dataset, answer the specified questions with summarization and effective visuals.\n",
    "'''\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "dat_mtcars = pd.read_csv(\"mtcars.csv\",index_col=0)\n",
    "dat_mtcars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5c18eed1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 32 entries, Mazda RX4 to Volvo 142E\n",
      "Data columns (total 11 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   mpg     32 non-null     float64\n",
      " 1   cyl     32 non-null     int64  \n",
      " 2   disp    32 non-null     float64\n",
      " 3   hp      32 non-null     int64  \n",
      " 4   drat    32 non-null     float64\n",
      " 5   wt      32 non-null     float64\n",
      " 6   qsec    32 non-null     float64\n",
      " 7   vs      32 non-null     int64  \n",
      " 8   am      32 non-null     int64  \n",
      " 9   gear    32 non-null     int64  \n",
      " 10  carb    32 non-null     int64  \n",
      "dtypes: float64(5), int64(6)\n",
      "memory usage: 3.0+ KB\n"
     ]
    }
   ],
   "source": [
    "dat_mtcars.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5973dba3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cyl</th>\n",
       "      <th>disp</th>\n",
       "      <th>hp</th>\n",
       "      <th>drat</th>\n",
       "      <th>wt</th>\n",
       "      <th>qsec</th>\n",
       "      <th>vs</th>\n",
       "      <th>am</th>\n",
       "      <th>gear</th>\n",
       "      <th>carb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>20.090625</td>\n",
       "      <td>6.187500</td>\n",
       "      <td>230.721875</td>\n",
       "      <td>146.687500</td>\n",
       "      <td>3.596563</td>\n",
       "      <td>3.217250</td>\n",
       "      <td>17.848750</td>\n",
       "      <td>0.437500</td>\n",
       "      <td>0.406250</td>\n",
       "      <td>3.687500</td>\n",
       "      <td>2.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.026948</td>\n",
       "      <td>1.785922</td>\n",
       "      <td>123.938694</td>\n",
       "      <td>68.562868</td>\n",
       "      <td>0.534679</td>\n",
       "      <td>0.978457</td>\n",
       "      <td>1.786943</td>\n",
       "      <td>0.504016</td>\n",
       "      <td>0.498991</td>\n",
       "      <td>0.737804</td>\n",
       "      <td>1.6152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>10.400000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>71.100000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>2.760000</td>\n",
       "      <td>1.513000</td>\n",
       "      <td>14.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>15.425000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>120.825000</td>\n",
       "      <td>96.500000</td>\n",
       "      <td>3.080000</td>\n",
       "      <td>2.581250</td>\n",
       "      <td>16.892500</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>19.200000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>196.300000</td>\n",
       "      <td>123.000000</td>\n",
       "      <td>3.695000</td>\n",
       "      <td>3.325000</td>\n",
       "      <td>17.710000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>22.800000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>326.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>3.920000</td>\n",
       "      <td>3.610000</td>\n",
       "      <td>18.900000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>33.900000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>472.000000</td>\n",
       "      <td>335.000000</td>\n",
       "      <td>4.930000</td>\n",
       "      <td>5.424000</td>\n",
       "      <td>22.900000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>8.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             mpg        cyl        disp          hp       drat         wt  \\\n",
       "count  32.000000  32.000000   32.000000   32.000000  32.000000  32.000000   \n",
       "mean   20.090625   6.187500  230.721875  146.687500   3.596563   3.217250   \n",
       "std     6.026948   1.785922  123.938694   68.562868   0.534679   0.978457   \n",
       "min    10.400000   4.000000   71.100000   52.000000   2.760000   1.513000   \n",
       "25%    15.425000   4.000000  120.825000   96.500000   3.080000   2.581250   \n",
       "50%    19.200000   6.000000  196.300000  123.000000   3.695000   3.325000   \n",
       "75%    22.800000   8.000000  326.000000  180.000000   3.920000   3.610000   \n",
       "max    33.900000   8.000000  472.000000  335.000000   4.930000   5.424000   \n",
       "\n",
       "            qsec         vs         am       gear     carb  \n",
       "count  32.000000  32.000000  32.000000  32.000000  32.0000  \n",
       "mean   17.848750   0.437500   0.406250   3.687500   2.8125  \n",
       "std     1.786943   0.504016   0.498991   0.737804   1.6152  \n",
       "min    14.500000   0.000000   0.000000   3.000000   1.0000  \n",
       "25%    16.892500   0.000000   0.000000   3.000000   2.0000  \n",
       "50%    17.710000   0.000000   0.000000   4.000000   2.0000  \n",
       "75%    18.900000   1.000000   1.000000   4.000000   4.0000  \n",
       "max    22.900000   1.000000   1.000000   5.000000   8.0000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dat_mtcars.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "a593c36c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Histogram of the distribution of MPG'}, ylabel='Frequency'>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1. Explore the distribution of fuel efficiency of the cars. \n",
    "# Remember to label both the axes and put a title to the plot.\n",
    "dat_mtcars[\"mpg\"].plot(kind = 'hist',x='mpg',y='frequency',bins=10, title=\"Histogram of the distribution of MPG\",color=\"black\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d36d18ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dat_mtcars[\"mpg\"].plot(kind=\"box\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "5becf6fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cyl</th>\n",
       "      <th>disp</th>\n",
       "      <th>hp</th>\n",
       "      <th>drat</th>\n",
       "      <th>wt</th>\n",
       "      <th>qsec</th>\n",
       "      <th>vs</th>\n",
       "      <th>am</th>\n",
       "      <th>gear</th>\n",
       "      <th>carb</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Toyota Corolla</th>\n",
       "      <td>33.9</td>\n",
       "      <td>4</td>\n",
       "      <td>71.1</td>\n",
       "      <td>65</td>\n",
       "      <td>4.22</td>\n",
       "      <td>1.835</td>\n",
       "      <td>19.9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 mpg  cyl  disp  hp  drat     wt  qsec  vs  am  gear  carb\n",
       "model                                                                     \n",
       "Toyota Corolla  33.9    4  71.1  65  4.22  1.835  19.9   1   1     4     1"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2.1 Cars with best efficiency.\n",
    "max_mpg=dat_mtcars[\"mpg\"].max()\n",
    "dat_mtcars[dat_mtcars[\"mpg\"]==max_mpg]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2236a5e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cyl</th>\n",
       "      <th>disp</th>\n",
       "      <th>hp</th>\n",
       "      <th>drat</th>\n",
       "      <th>wt</th>\n",
       "      <th>qsec</th>\n",
       "      <th>vs</th>\n",
       "      <th>am</th>\n",
       "      <th>gear</th>\n",
       "      <th>carb</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Cadillac Fleetwood</th>\n",
       "      <td>10.4</td>\n",
       "      <td>8</td>\n",
       "      <td>472.0</td>\n",
       "      <td>205</td>\n",
       "      <td>2.93</td>\n",
       "      <td>5.250</td>\n",
       "      <td>17.98</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lincoln Continental</th>\n",
       "      <td>10.4</td>\n",
       "      <td>8</td>\n",
       "      <td>460.0</td>\n",
       "      <td>215</td>\n",
       "      <td>3.00</td>\n",
       "      <td>5.424</td>\n",
       "      <td>17.82</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  \\\n",
       "model                                                                          \n",
       "Cadillac Fleetwood   10.4    8  472.0  205  2.93  5.250  17.98   0   0     3   \n",
       "Lincoln Continental  10.4    8  460.0  215  3.00  5.424  17.82   0   0     3   \n",
       "\n",
       "                     carb  \n",
       "model                      \n",
       "Cadillac Fleetwood      4  \n",
       "Lincoln Continental     4  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2.2 Cars with worst fuel efficiency.\n",
    "min_mpg=dat_mtcars[\"mpg\"].min()\n",
    "dat_mtcars[dat_mtcars[\"mpg\"]==min_mpg]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "68bf804e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    19\n",
       "1    13\n",
       "Name: am, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Features like am, gearsw are numeric but binary features. They are used to actual categorize cars into types.\n",
    "# 3. How many cars are manual v/s automatic?\n",
    "dat_mtcars[\"am\"].nunique()\n",
    "dat_mtcars[\"am\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e91e8b4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "dat_mtcars=pd.read_csv(\"mtcars.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "fdc56428",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Car with worst horsepower:\n",
      "          model  hp\n",
      "18  Honda Civic  52\n"
     ]
    }
   ],
   "source": [
    "# 4. Car with the worst horsepower\n",
    "worst_hp_car = dat_mtcars[dat_mtcars['hp'] == dat_mtcars['hp'].min()][['model', 'hp']]\n",
    "print(f\"Car with worst horsepower:\\n{worst_hp_car}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "137fb094",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 number summary of displacement:\n",
      "min     71.100\n",
      "25%    120.825\n",
      "50%    196.300\n",
      "75%    326.000\n",
      "max    472.000\n",
      "Name: disp, dtype: float64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 5. Find 5 number summary and draw boxplot of displacement.\n",
    "disp_summary=dat_mtcars['disp'].describe()[['min','25%','50%','75%','max']]\n",
    "print(f\"5 number summary of displacement:\\n{disp_summary}\")\n",
    "dat_mtcars['disp'].plot(kind='box', vert=False, figsize=(6, 4), title='Boxplot of Displacement')\n",
    "plt.xlabel(\"Displacement\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "9bac3616",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Heaviest car and its gears:\n",
      "                  model     wt  gear\n",
      "15  Lincoln Continental  5.424     3\n"
     ]
    }
   ],
   "source": [
    "dat_mtcars=pd.read_csv(\"mtcars.csv\")\n",
    "# 6. Which is the heaviest car? How many gears does it have?\n",
    "heaviest_car = dat_mtcars[dat_mtcars['wt'] == dat_mtcars['wt'].max()][['model', 'wt', 'gear']]\n",
    "print(f\"Heaviest car and its gears:\\n{heaviest_car}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "9302c156",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Car with best (fastest) qsec:\n",
      "             model  qsec\n",
      "28  Ford Pantera L  14.5\n"
     ]
    }
   ],
   "source": [
    "# 7. Which is the car with the best qsec?\n",
    "best_qsec_car = dat_mtcars[dat_mtcars['qsec'] == dat_mtcars['qsec'].min()][['model', 'qsec']]\n",
    "print(f\"Car with best (fastest) qsec:\\n{best_qsec_car}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "7a613c9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average MPG of manual cars: 24.39230769230769\n",
      "Average MPG of automatic cars: 17.147368421052633\n"
     ]
    }
   ],
   "source": [
    "# 8. What is average MPG for manual vs. automatic cars?\n",
    "dat_man= dat_mtcars[dat_mtcars[\"am\"]==1][\"mpg\"] # Manual cars are marked as 1\n",
    "print(\"Average MPG of manual cars:\",dat_man.mean())\n",
    "dat_auto= dat_mtcars[dat_mtcars[\"am\"]==0][\"mpg\"]\n",
    "print(\"Average MPG of automatic cars:\",dat_auto.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "b92f2b03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Fuel Efficiency Summary (MPG) for Manual vs Automatic Cars:\n",
      "    count       mean       std   min    25%   50%   75%   max\n",
      "am                                                           \n",
      "0    19.0  17.147368  3.833966  10.4  14.95  17.3  19.2  24.4\n",
      "1    13.0  24.392308  6.166504  15.0  21.00  22.8  30.4  33.9\n",
      "\n",
      "Fuel Efficiency Analysis:\n",
      "Manual Cars - Average MPG: nan\n",
      "Automatic Cars - Average MPG: nan\n",
      "Automatic cars tend to be more fuel efficient than Manual cars.\n"
     ]
    }
   ],
   "source": [
    "# 9. Draw Side by Side box plot to understand the difference in fuel\n",
    "# efficience of Manual vs Automatic cars. Analyze and write about fuel\n",
    "# efficiency in each group (manual vs. automatic).\n",
    "dat_mtcars = pd.read_csv(\"mtcars.csv\")\n",
    "fuel_efficiency_summary = dat_mtcars.groupby('am')['mpg'].describe()\n",
    "print(\"\\nFuel Efficiency Summary (MPG) for Manual vs Automatic Cars:\")\n",
    "print(fuel_efficiency_summary)\n",
    "manual_mpg_mean = dat_mtcars[dat_mtcars['am'] == 'Manual']['mpg'].mean()\n",
    "automatic_mpg_mean = dat_mtcars[dat_mtcars['am'] == 'Automatic']['mpg'].mean()\n",
    "print(\"\\nFuel Efficiency Analysis:\")\n",
    "print(f\"Manual Cars - Average MPG: {manual_mpg_mean:.2f}\")\n",
    "print(f\"Automatic Cars - Average MPG: {automatic_mpg_mean:.2f}\")\n",
    "if manual_mpg_mean > automatic_mpg_mean:\n",
    "    print(\"Manual cars tend to be more fuel efficient than Automatic cars.\")\n",
    "else:\n",
    "    print(\"Automatic cars tend to be more fuel efficient than Manual cars.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "646efeb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Scatter Plot from DataFrame'}, xlabel='mpg', ylabel='wt'>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 10. What is the relationship between the weight of the car and MPG?\n",
    "dat_x= dat_mtcars[[\"mpg\",\"wt\"]]\n",
    "dat_x= dat_x.reset_index(drop=True)\n",
    "dat_x.plot(kind='scatter', x='mpg', y='wt', color='blue',\n",
    "title='Scatter Plot from DataFrame')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "ce567c19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of cars based on gear type:\n",
      "3    15\n",
      "4    12\n",
      "5     5\n",
      "Name: gear, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# 11. Categorize the cars based on the number of gears in the cars.\n",
    "# How many cars are there in each type?\n",
    "dat_mtcars = pd.read_csv(\"mtcars.csv\")\n",
    "gear_counts = dat_mtcars['gear'].value_counts()\n",
    "print(f\"Number of cars based on gear type:\\n{gear_counts}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "ad35464e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average MPG for each gear type:\n",
      "gear\n",
      "3    16.106667\n",
      "4    24.533333\n",
      "5    21.380000\n",
      "Name: mpg, dtype: float64\n",
      "\n",
      "Analysis:\n",
      "Higher gear cars generally tend to have lower or similar fuel\n",
      "efficiency compared to lower gear cars, depending on the engine\n",
      "performance and aerodynamics.\n"
     ]
    }
   ],
   "source": [
    "# 12. What is the relationship between fuel efficiency and the number\n",
    "# of gears in the car?\n",
    "# Analyze the relationship between fuel efficiency and the number of gears.\n",
    "gear_mpg_relation = dat_mtcars.groupby('gear')['mpg'].mean()\n",
    "print(f\"Average MPG for each gear type:\\n{gear_mpg_relation}\")\n",
    "print('''\\nAnalysis:\\nHigher gear cars generally tend to have lower or similar fuel\n",
    "efficiency compared to lower gear cars, depending on the engine\n",
    "performance and aerodynamics.''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "04316d22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Horsepower for each Cylinder type:\n",
      "cyl\n",
      "4     82.636364\n",
      "6    122.285714\n",
      "8    209.214286\n",
      "Name: hp, dtype: float64\n",
      "\n",
      "Analysis:\n",
      "Cars with more cylinders have higher horsepower since they\n",
      "generally have larger engines capable of producing more power.\n"
     ]
    }
   ],
   "source": [
    "# 13. Explain the relationship between horse power and number of\n",
    "# cylinders in the car.\n",
    "hp_cyl_relation = dat_mtcars.groupby('cyl')['hp'].mean()\n",
    "print(f\"Average Horsepower for each Cylinder type:\\n{hp_cyl_relation}\")\n",
    "print('''\\nAnalysis:\\nCars with more cylinders have higher horsepower since they\n",
    "generally have larger engines capable of producing more power.''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "204e8bb5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation between Displacement and Horsepower:\n",
      "          disp        hp\n",
      "disp  1.000000  0.790949\n",
      "hp    0.790949  1.000000\n",
      "\n",
      "Analysis:\n",
      "Larger displacement engines usually generate more power, but\n",
      "this can also lead to increased fuel consumption.\n"
     ]
    }
   ],
   "source": [
    "# 14. Explain the relationship between displacement and gross horse power.\n",
    "disp_hp_relation = dat_mtcars[['disp', 'hp']].corr()\n",
    "print(f\"Correlation between Displacement and Horsepower:\\n{disp_hp_relation}\")\n",
    "print('''\\nAnalysis:\\nLarger displacement engines usually generate more power, but\n",
    "this can also lead to increased fuel consumption.''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "0c64a3c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best car for high speed and good fuel efficiency:\n",
      "model    Lotus Europa\n",
      "mpg              30.4\n",
      "qsec             16.9\n",
      "Name: 27, dtype: object\n",
      "-----------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# 15. Which car would I pick if I am looking for high speed as well as\n",
    "# good fuel efficiency?\n",
    "dat_mtcars['performance_score'] = dat_mtcars['mpg'] / dat_mtcars['qsec']\n",
    "best_car = dat_mtcars.loc[dat_mtcars['performance_score'].idxmax(), ['model', 'mpg',\n",
    "'qsec']]\n",
    "print(f\"Best car for high speed and good fuel efficiency:\\n{best_car}\")\n",
    "print(\"-----------------------------------------------------------------------\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8ca58fea",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "Question 2:\n",
    "For the CEREALS dataset, answer the specified questions with summarization \n",
    "and  effective visuals. \n",
    "'''\n",
    "import pandas as pd\n",
    "df1 = pd.read_excel(\"Cereals.xls\")\n",
    "df1.replace(-1, pd.NA, inplace=True)\n",
    "df1.to_csv(\"Cleaned_Cereals.csv\", index=False)\n",
    "df=pd.read_csv(\"Cleaned_Cereals.csv\")\n",
    "numeric_cols = ['rating', 'fiber', 'sugars', 'protein', 'calories']\n",
    "df[numeric_cols] = df[numeric_cols].apply(pd.to_numeric,errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c682bc37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique cereal brands: 76\n"
     ]
    }
   ],
   "source": [
    "# 1. How many unique cereal brands are there?\n",
    "unique_brands = df['name'].nunique()\n",
    "print(\"Unique cereal brands:\", unique_brands)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a9626a81",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cereals per manufacturer:\n",
      "mfr\n",
      "K    23\n",
      "G    22\n",
      "P     9\n",
      "Q     8\n",
      "R     8\n",
      "N     5\n",
      "A     1\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# 2. Number of cereals per manufacturer\n",
    "cereals_per_manufacturer = df['mfr'].value_counts()\n",
    "print(f\"Cereals per manufacturer:\\n{cereals_per_manufacturer}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d80166b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Count of hot vs cold cereals:\n",
      "type\n",
      "C    73\n",
      "H     3\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# 3. Count of hot vs cold cereals\n",
    "cereal_types = df['type'].value_counts()\n",
    "print(f\"Count of hot vs cold cereals:\\n{cereal_types}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "2e127d75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best cereal:\n",
      "name      All-Bran_with_Extra_Fiber\n",
      "rating                    93.704912\n",
      "Name: 2, dtype: object\n",
      "Worst cereal:\n",
      "name      Cap'n'Crunch\n",
      "rating       18.042851\n",
      "Name: 9, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# 4. Best and worst cereal based on rating\n",
    "best_cereal = df.loc[df['rating'].idxmax(), ['name', 'rating']]\n",
    "worst_cereal = df.loc[df['rating'].idxmin(), ['name', 'rating']]\n",
    "print(f\"Best cereal:\\n{best_cereal}\")\n",
    "print(f\"Worst cereal:\\n{worst_cereal}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d115e8a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average rating for hot vs cold cereals:\n",
      "type\n",
      "C    41.734838\n",
      "H    56.737708\n",
      "Name: rating, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# 5. Compare ratings for hot vs cold cereals\n",
    "avg_rating_by_type = df.groupby('type')['rating'].mean()\n",
    "print(f\"Average rating for hot vs cold cereals:\\n{avg_rating_by_type}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d223810a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cereal with highest fiber:\n",
      "name     All-Bran_with_Extra_Fiber\n",
      "fiber                         14.0\n",
      "Name: 2, dtype: object\n",
      "\n",
      "Cereal(s) with lowest sugar:\n",
      "                         name  sugars\n",
      "2   All-Bran_with_Extra_Fiber     0.0\n",
      "19     Cream_of_Wheat_(Quick)     0.0\n",
      "53                Puffed_Rice     0.0\n",
      "54               Puffed_Wheat     0.0\n",
      "62             Shredded_Wheat     0.0\n",
      "63     Shredded_Wheat_'n'Bran     0.0\n",
      "64  Shredded_Wheat_spoon_size     0.0\n"
     ]
    }
   ],
   "source": [
    "# 6. Cereals with highest fiber and lowest sugar\n",
    "df_cleaned = df[df['sugars'] >= 0]\n",
    "highest_fiber = df_cleaned.loc[df_cleaned['fiber'].idxmax(), ['name', 'fiber']]\n",
    "lowest_sugar = df_cleaned[df_cleaned['sugars'] == df_cleaned['sugars'].min()][['name', 'sugars']]\n",
    "print(f\"Cereal with highest fiber:\\n{highest_fiber}\")\n",
    "print(f\"\\nCereal(s) with lowest sugar:\\n{lowest_sugar}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7aca4dbd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Cereals with more than 3 grams of protein:\n",
      "                                     name  protein\n",
      "1                                All-Bran        4\n",
      "2               All-Bran_with_Extra_Fiber        4\n",
      "10                               Cheerios        6\n",
      "40                                   Life        4\n",
      "42                                  Maypo        4\n",
      "43   Muesli_Raisins,_Dates,_&amp;_Almonds        4\n",
      "44  Muesli_Raisins,_Peaches,_&amp;_Pecans        4\n",
      "55                     Quaker_Oat_Squares        4\n",
      "56                         Quaker_Oatmeal        5\n",
      "66                              Special_K        6\n"
     ]
    }
   ],
   "source": [
    "# 7. Cereals with more than 3 grams of protein\n",
    "high_protein_cereals = df[df['protein'] > 3][['name', 'protein']]\n",
    "print(\"\\nCereals with more than 3 grams of protein:\")\n",
    "print(high_protein_cereals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "12639dfa-0a58-44dd-8942-a675da96b041",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Cereals by display shelf:\n",
      "shelf\n",
      "3    35\n",
      "2    21\n",
      "1    20\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# 8. Tabulate cereals by display shelf\n",
    "display_shelf_counts = df['shelf'].value_counts()\n",
    "print(\"\\nCereals by display shelf:\")\n",
    "print(display_shelf_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "16cf5ab4-e2af-4793-88a3-82f2f2cee4f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average sugar content per manufacturer:\n",
      "mfr\n",
      "A    3.000000\n",
      "G    7.954545\n",
      "K    7.565217\n",
      "N    1.000000\n",
      "P    8.777778\n",
      "Q    6.142857\n",
      "R    6.125000\n",
      "Name: sugars, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# 9. Sugar content variation across brands\n",
    "sugar_by_brand = df.groupby('mfr')['sugars'].mean()\n",
    "print(\"\\nAverage sugar content per manufacturer:\")\n",
    "print(sugar_by_brand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "44099b70-6f2d-42e6-b7c5-c6cc4c1b8904",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average calories per manufacturer:\n",
      "mfr\n",
      "A    100.000000\n",
      "G    111.363636\n",
      "K    108.695652\n",
      "N     90.000000\n",
      "P    108.888889\n",
      "Q     95.000000\n",
      "R    115.000000\n",
      "Name: calories, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# 10. Average calories in cereals per manufacturer\n",
    "avg_calories_per_mfr = df.groupby('mfr')['calories'].mean()\n",
    "print(\"\\nAverage calories per manufacturer:\")\n",
    "print(avg_calories_per_mfr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d2738dbc-305d-44d8-8533-84889550794d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average nutritional content across all cereals:\n",
      "calories    107.368421\n",
      "sugars        7.040000\n",
      "protein       2.526316\n",
      "fiber         2.048684\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# 11. Average nutritional content across all cereals\n",
    "avg_nutritional_content = df[['calories', 'sugars', 'protein',\n",
    "'fiber']].mean()\n",
    "print(\"\\nAverage nutritional content across all cereals:\")\n",
    "print(avg_nutritional_content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "d0a60b8e-b1fa-4897-89d3-5407c09e2196",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Correlation between sugar and calories:\n",
      "            sugars  calories\n",
      "sugars    1.000000  0.574758\n",
      "calories  0.574758  1.000000\n"
     ]
    }
   ],
   "source": [
    "# 12. Relationship between sugar and calories\n",
    "sugar_calories_corr = df[['sugars', 'calories']].corr()\n",
    "print(\"\\nCorrelation between sugar and calories:\")\n",
    "print(sugar_calories_corr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b80dd7e5-8be9-46ea-9445-ef2498e3d16c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average sugar content in high vs low rated cereals:\n",
      "High rated cereals: 3.7837837837837838\n",
      "Low rated cereals: 10.210526315789474\n"
     ]
    }
   ],
   "source": [
    "# 13. Compare sugar content in high vs low rated cereals\n",
    "median_rating = df['rating'].median()\n",
    "high_rated_cereals = df[df['rating'] >= median_rating]['sugars'].mean()\n",
    "low_rated_cereals = df[df['rating'] < median_rating]['sugars'].mean()\n",
    "print(\"\\nAverage sugar content in high vs low rated cereals:\")\n",
    "print(\"High rated cereals:\", high_rated_cereals)\n",
    "print(\"Low rated cereals:\", low_rated_cereals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "5b11fc1d-83d5-4062-828e-18e4537be9dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average rating for healthy cereals: 84.0889305\n"
     ]
    }
   ],
   "source": [
    "# 14. Do healthy cereals have higher ratings?\n",
    "healthy_cereals = df[(df['fiber'] > 3) & (df['sugars'] < 5)]\n",
    "healthy_cereal_avg_rating = healthy_cereals['rating'].mean()\n",
    "print(\"\\nAverage rating for healthy cereals:\",\n",
    "healthy_cereal_avg_rating)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "ab2326df-9f21-46e3-ba4a-ca06829d5a59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average rating by display shelf:\n",
      "shelf\n",
      "1    46.145439\n",
      "2    34.972827\n",
      "3    44.557662\n",
      "Name: rating, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# 15. Relationship between rating and display shelf\n",
    "rating_by_shelf = df.groupby('shelf')['rating'].mean()\n",
    "print(\"\\nAverage rating by display shelf:\")\n",
    "print(rating_by_shelf)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
